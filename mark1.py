import ast
import os
import re
import bandit
from bandit.core import config, manager
from pylint import epylint as lint

# Common Vulnerabilities List (Top 10)
VULNERABILITIES = {
    "SQL Injection": re.compile(r"(SELECT|UPDATE|DELETE|INSERT).*\b(FROM|INTO)\b", re.IGNORECASE),
    "XSS (Cross-site Scripting)": re.compile(r"(<script.*?>.*?</script>|javascript:|onerror=)", re.IGNORECASE),
    "CSRF (Cross-site Request Forgery)": re.compile(r"(CSRFToken|csrfmiddlewaretoken)", re.IGNORECASE),
    "Unrestricted File Upload": re.compile(r"(input type=['\"]?file['\"]?)", re.IGNORECASE),
    "Insecure Deserialization": re.compile(r"(pickle\.load|yaml\.load)", re.IGNORECASE),
    "Command Injection": re.compile(r"(os\.system|subprocess\.call|subprocess\.Popen)", re.IGNORECASE),
    "Buffer Overflow": re.compile(r"(strcpy|strcat|gets)", re.IGNORECASE),
    "Insecure Cryptographic Storage": re.compile(r"(md5|sha1|des|rc4)", re.IGNORECASE),
    "Weak Password Policy": re.compile(r"(password\s*=\s*[\"']?(\w{1,6})[\"']?)", re.IGNORECASE),
    "Open Redirect": re.compile(r"(response\.redirect|location\s*=\s*[\"']?.*?[\"']?)", re.IGNORECASE),
}


def analyze_code_with_bandit(file_path):
    # Configuration for Bandit
    b_conf = config.BanditConfig()
    b_mgr = manager.BanditManager(b_conf, 'file')
    b_mgr.populate_baseline(file_list=[file_path])
    b_mgr.run_tests()
    return b_mgr.get_issue_list()


def analyze_code_with_pylint(file_path):
    # Running pylint
    pylint_stdout, pylint_stderr = lint.py_run(file_path, return_std=True)
    return pylint_stdout.getvalue(), pylint_stderr.getvalue()


def analyze_code_with_ast(file_path):
    with open(file_path, 'r') as file:
        tree = ast.parse(file.read())
    return tree


def check_vulnerabilities(code):
    findings = []
    for vuln, pattern in VULNERABILITIES.items():
        if re.search(pattern, code):
            findings.append(vuln)
    return findings


def generate_report(file_path, ast_findings, bandit_findings, pylint_findings, custom_findings):
    report = f"Security Analysis Report for {file_path}\n\n"
    report += "AST Analysis Findings:\n"
    for finding in ast_findings:
        report += f" - {finding}\n"
    report += "\nBandit Findings:\n"
    for finding in bandit_findings:
        report += f" - {finding.test_id}: {finding.text}\n"
    report += "\nPylint Findings:\n"
    report += pylint_findings
    report += "\nCustom Pattern Findings:\n"
    for finding in custom_findings:
        report += f" - {finding}\n"

    return report


def main(file_path):
    print(f"Analyzing {file_path}...\n")

    # AST Analysis
    ast_tree = analyze_code_with_ast(file_path)
    ast_findings = []

    # Bandit Analysis
    bandit_findings = analyze_code_with_bandit(file_path)

    # Pylint Analysis
    pylint_findings, _ = analyze_code_with_pylint(file_path)

    # Custom Vulnerability Patterns
    with open(file_path, 'r') as file:
        code = file.read()
    custom_findings = check_vulnerabilities(code)

    # Generate Report
    report = generate_report(file_path, ast_findings, bandit_findings, pylint_findings, custom_findings)
    report_file = file_path.replace('.py', '_security_report.txt')
    with open(report_file, 'w') as file:
        file.write(report)

    print(f"Analysis complete. Report saved to {report_file}")


if __name__ == "__main__":
    # Replace this path with the path to your codebase
    codebase_path = 'C:\Users\siddh\PycharmProjects\vulnerability\app.py'
    main(codebase_path)
