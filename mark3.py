import os
import re
import subprocess
import json
from io import StringIO
from contextlib import redirect_stdout
from datetime import datetime
import shutil
import pickle
import sys
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
import json
import re
import json
import re






import json
import re


class VulnerabilityScanner:
    def __init__(self, dataset_path):
        self.load_dataset(dataset_path)

    def load_dataset(self, dataset_path):
        with open(dataset_path, 'r') as file:
            self.dataset = json.load(file)

    def scan_file(self, file_path, output_report):
        with open(file_path, 'r') as file:
            code_lines = file.readlines()

        vulnerabilities_found = []

        for data in self.dataset:
            # Check if 'code_pattern' exists in the dataset entry
            if 'code_pattern' not in data:
                print(f"Warning: 'code_pattern' missing in dataset entry with id {data.get('id', 'unknown')}")
                continue

            try:
                pattern = re.compile(data['code_pattern'])
            except re.error as e:
                print(f"Error compiling regex for dataset entry with id {data.get('id', 'unknown')}: {e}")
                continue

            for i, line in enumerate(code_lines):
                if pattern.search(line):
                    vulnerabilities_found.append({
                        "line_number": i + 1,
                        "vulnerability": data['label'],
                        "vulnerable_code": line.strip(),
                        "solution": data['solution']
                    })

        self.generate_report(file_path, output_report, vulnerabilities_found)

    def generate_report(self, input_file, output_report, vulnerabilities_found):
        with open(output_report, 'w') as report:
            report.write(f"Vulnerability Report for {input_file}\n")
            report.write("=" * 50 + "\n\n")

            if not vulnerabilities_found:
                report.write("No vulnerabilities found.\n")
                return

            for vuln in vulnerabilities_found:
                report.write(f"Vulnerability: {vuln['vulnerability']}\n")
                report.write(f"Line Number: {vuln['line_number']}\n")
                report.write(f"Vulnerable Code:\n{vuln['vulnerable_code']}\n")
                report.write(f"Solution:\n{vuln['solution']}\n")
                report.write("-" * 50 + "\n\n")


if __name__ == "__main__":
    # Load the dataset with vulnerabilities and solutions
    dataset_path = r'C:\Users\siddh\PycharmProjects\vulnerability\Newvulnerability_dataset_with_solutions.json'
    scanner = VulnerabilityScanner(dataset_path)

    # File to scan for vulnerabilities
    input_code_file = r'C:\Users\siddh\PycharmProjects\vulnerability\app2.js'  # Replace with your actual code file

    # Output report file
    output_report_file = r'C:\Users\siddh\PycharmProjects\vulnerability\mark3_outputs\vulnerability_report2js.txt'

    # Scan the file and generate the report
    scanner.scan_file(input_code_file, output_report_file)

    print(f"Vulnerability report generated: {output_report_file}")



